!pip install -q numpy pandas scikit-learn matplotlib seaborn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder







df = pd.read_csv("https://huggingface.co/datasets/kkotkar1/course-reviews/resolve/main/reviews.csv")
print(df.columns)







df = df.dropna()
df = df.drop_duplicates()







# print("After cleaning:", df.shape)








x = df.iloc[:, 0]
y = df.iloc[:, 1]







le = LabelEncoder()
y = le.fit_transform(y)







x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)







vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
x_vector = vectorizer.fit_transform(x_train)
x_testvector = vectorizer.transform(x_test)







model = LogisticRegression(max_iter=300)
model.fit(x_vector, y_train)






y_pred = model.predict(x_testvector)






print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))






cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:\n", cm)







plt.figure(figsize=(6,4))
sns.heatmap(cm, annot=True, fmt='d', cmap="Blues",
xticklabels=["Negative","Positive"],
yticklabels=["Negative","Positive"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()








review = "This course was amazing!"
review_features = vectorizer.transform([review])
prediction = model.predict(review_features)[0]
sentiment = le.inverse_transform([prediction])[0]
print("Sentiment -->", sentiment)
