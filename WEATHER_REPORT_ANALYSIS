!pip install -q numpy pandas scikit-learn matplotlib seaborn







import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score







url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv"
df = pd.read_csv(url)
print(df.columns)







df = df.dropna().drop_duplicates()

# Convert Date into numeric features
df["Date"] = pd.to_datetime(df["Date"])
df["Year"] = df["Date"].dt.year
df["Month"] = df["Date"].dt.month
df["Day"] = df["Date"].dt.day







X = df[["Year", "Month", "Day"]]
y = df["Temp"]







X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)







rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
xgb = GradientBoostingRegressor(n_estimators=200, learning_rate=0.05, random_state=42)
xgb.fit(X_train, y_train)







def evaluate(model, X_test, y_test, name="Model"):
    preds = model.predict(X_test)
    print(f"\n{name} Performance:")
    print("MSE:", mean_squared_error(y_test, preds))
    print("MAE:", mean_absolute_error(y_test, preds))
    print("RÂ²:", r2_score(y_test, preds))
    return preds







rf_preds = evaluate(rf, X_test, y_test, "Random Forest")
xgb_preds = evaluate(xgb, X_test, y_test, "XGBoost")







plt.figure(figsize=(8,5))
plt.plot(y_test.values[:100], label="Actual", marker="o")
plt.plot(rf_preds[:100], label="RF Predictions", marker="x")
plt.plot(xgb_preds[:100], label="XGB Predictions", marker="s")
plt.legend()
plt.title("Actual vs Predicted Temperatures")
plt.xlabel("Samples")
plt.ylabel("Temperature")
plt.show()







sample = X_test.iloc[0:1]
forecast = rf.predict(sample)[0]
print("Predicted Temperature for sample -->", forecast)
